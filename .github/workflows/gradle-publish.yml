name: Build

on: [ push, pull_request ]

permissions:
  contents: write  # 需要写入权限来创建 release

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Run build with Gradle Wrapper
        run: ./gradlew build

      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs
      - name: Get version from Gradle task
        id: get-version
        run: echo "version=$(./gradlew printVersion --quiet)" >> $GITHUB_OUTPUT
        # 需确保任务在 build 之后执行，因为 gradle 任务依赖项目配置
  release:
    needs: build  # 依赖构建任务完成
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: build/libs

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1  # 使用官方推荐的 ncipollo/release-action
        with:
          # 基础配置
          token: ${{ github.token }}
          tag: ${{ needs.build.outputs.version }}
          body: |
            ### 构建信息
            - 构建时间：${{ github.run_timestamp }}
            - 提交哈希：[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          artifacts: build/libs/**/**.jar
          asset_path: build/libs/${{ env.artifact_name }}
          asset_name: ${{ env.artifact_name }}
          asset_content_type: application/java-archive
        env:
          artifact_name: $(ls build/libs)
